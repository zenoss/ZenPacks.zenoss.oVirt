#!/usr/bin/env python
######################################################################
#
# Copyright 2008 Zenoss, Inc. All Rights Reserved.
#
######################################################################

import sys
import signal
import socket
import re
from optparse import OptionParser
from httplib import HTTPSConnection
from xml.dom.minidom import parseString

class TimeExceededError(Exception): pass

def alarmHandler(signum, frame):
    raise TimeExceededError, "Operation timed out"

def getText(element):
    return element.childNodes[0].data


class ZenossAxlPlugin:
    def __init__(self, host, user, passwd, pObject, counters):
        self.host = host
        self.user = user
        self.passwd = passwd
        self.pObject = pObject
        self.counters = counters
    
    
    def run(self):
        authstring = ':'.join((self.user, self.passwd)).encode('base64')
        headers = {
            "Content-type": "text/xml",
            "Authorization": "Basic " + authstring.rstrip(),
            "SOAPAction": '"http://schemas.cisco.com/ast/soap/action/#PerfmonPort#PerfmonCollectCounterData"',
            }
        
        body = (
            '<?xml version="1.0" encoding="utf-8" ?>\n'
            '<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"\n'
            ' xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"\n'
            ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n'
            ' xmlns:xsd="http://www.w3.org/2001/XMLSchema">\n'
            ' <soap:Body soap:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">\n'
            ' <q1:PerfmonCollectCounterData xmlns:q1="http://schemas.cisco.com/ast/soap/">\n'
            ' <Host xsi:type="xsd:string">%s</Host>\n'
            ' <Object xsi:type="tns:ObjectNameType">%s</Object>\n'
            ' </q1:PerfmonCollectCounterData>\n'
            ' </soap:Body>\n'
            '</soap:Envelope>\n'
            % (self.host, self.pObject)
            )

        conn = None
        response = None
        version = None

        signal.signal(signal.SIGALRM, alarmHandler)
        signal.alarm(5)
        try:
            conn = HTTPSConnection(self.host, 8443)
            conn.request("POST", "/perfmonservice/services/PerfmonPort",
                body, headers)
            signal.alarm(0)
            response = conn.getresponse()
            if response.status != 404:
                version = "5"
        except socket.error:
            pass
        except TimeExceededError:
            pass
        
        signal.alarm(5)
        if version is None:
            try:
                conn = HTTPSConnection(self.host, 80)
                conn.request("POST", "/soap/astsvc.dll", body, headers)
                signal.alarm(0)
                response = conn.getresponse()
                if response.status != 404:
                    version = "4"
            except socket.error:
                pass
            except TimeExceededError:
                pass
        
        signal.alarm(5)
        if version is None:
            try:
                conn = HTTPSConnection(self.host, 443)
                conn.request("POST", "/soap/astsvc.dll", body, headers)
                signal.alarm(0)
                response = conn.getresponse()
                if response.status != 404:
                    version = "4.2.3"
            except socket.error:
                pass
            except TimeExceededError:
                pass

        signal.alarm(0)
        if version is None:
            print "Couldn't determine CallManager version"
            sys.exit(1)
                
        if response.status == 200:
            self.processResponse(response.read(), version)
            sys.exit(0)
        elif response.status == 401:
            print "Invalid username or password."
            sys.exit(1)
        else:
            print "Web service error (%d): %s" % (response.status, response.reason)
            sys.exit(1)


    def processResponse(self, response, version):
        dps = {}
        
        # Deal with wacky response from CallManager 4.2.3
        if re.search("^Server: ", response):
            match = response = re.search("^[^<]+(<\?xml version.+)", response)
            if match: response = match.groups()[0]
        xml = parseString(response)
        counters = xml.getElementsByTagName('item')
        if version.startswith("4"):
            counters = xml.getElementsByTagName('CounterInfo')
        for counter in counters:
            status = getText(counter.getElementsByTagName('CStatus')[0])
            if int(status) not in (0, 1):
                continue
            
            name = getText(counter.getElementsByTagName('Name')[0])
            name = name.split('\\')[-1]
            
            if self.counters and name not in self.counters:
                continue
            
            dps[name] = getText(counter.getElementsByTagName('Value')[0])

        nv_pairs = [ '='.join(("%s" % (n,), v)) for n, v in dps.items() ]
        print "AXL PerfmonCollectCounterData OK|%s" % (' '.join(nv_pairs))


if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-H", "--host", dest="host",
            help="Hostname/IP of CallManager server")
    parser.add_option("-u", "--user", dest="user",
            help="Username for CallManager AXL calls")
    parser.add_option("-w", "--password", dest="password",
            help="Password for CallManager AXL calls")
    parser.add_option("-o", "--object", dest="object",
            help="Perfmon object name")
    parser.add_option("-c", "--counter", dest="counter", action="append",
            help="Counter to collect. Can be specified multiple times")
    options, args = parser.parse_args()
    
    if not options.host:
        print "You must specify the host parameter."
        sys.exit(3)
        
    if not options.user:
        print "You must specify the user parameter."
        sys.exit(3)
        
    if not options.password:
        print "You must specify the password parameter."
        sys.exit(3)
        
    if not options.object:
        options.object = "Cisco CallManager"
        
    if not options.counter:
        options.counter = None
        
    cmd = ZenossAxlPlugin(options.host, options.user, options.password,
            options.object, options.counter)
    cmd.run()
